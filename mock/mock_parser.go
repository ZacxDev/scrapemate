// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ZacxDev/scrapemate (interfaces: HTMLParser)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHTMLParser is a mock of HTMLParser interface.
type MockHTMLParser struct {
	ctrl     *gomock.Controller
	recorder *MockHTMLParserMockRecorder
}

// MockHTMLParserMockRecorder is the mock recorder for MockHTMLParser.
type MockHTMLParserMockRecorder struct {
	mock *MockHTMLParser
}

// NewMockHTMLParser creates a new mock instance.
func NewMockHTMLParser(ctrl *gomock.Controller) *MockHTMLParser {
	mock := &MockHTMLParser{ctrl: ctrl}
	mock.recorder = &MockHTMLParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTMLParser) EXPECT() *MockHTMLParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockHTMLParser) Parse(arg0 context.Context, arg1 []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockHTMLParserMockRecorder) Parse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockHTMLParser)(nil).Parse), arg0, arg1)
}
