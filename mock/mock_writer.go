// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ZacxDev/scrapemate (interfaces: ResultWriter)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	scrapemate "github.com/ZacxDev/scrapemate"
)

// MockResultWriter is a mock of ResultWriter interface.
type MockResultWriter struct {
	ctrl     *gomock.Controller
	recorder *MockResultWriterMockRecorder
}

// MockResultWriterMockRecorder is the mock recorder for MockResultWriter.
type MockResultWriterMockRecorder struct {
	mock *MockResultWriter
}

// NewMockResultWriter creates a new mock instance.
func NewMockResultWriter(ctrl *gomock.Controller) *MockResultWriter {
	mock := &MockResultWriter{ctrl: ctrl}
	mock.recorder = &MockResultWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultWriter) EXPECT() *MockResultWriterMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockResultWriter) Run(arg0 context.Context, arg1 <-chan scrapemate.Result) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockResultWriterMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockResultWriter)(nil).Run), arg0, arg1)
}
